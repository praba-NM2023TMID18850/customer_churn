# -*- coding: utf-8 -*-
"""Teleco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xysQEj1z81hKnFzHjTzVaQAfM59bKl4y
"""

# Commented out IPython magic to ensure Python compatibility.
#import necessary libraries 

import pandas as pd

import numpy as np

import pickle

import matplotlib.pyplot as plt

# %matplotlib inline

import seaborn as sns

import sklearn

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

from sklearn.linear_model import LogisticRegression

from sklearn.tree import DecisionTreeClassifier

from sklearn.ensemble import RandomForestClassifier

from sklearn.neighbors import KNeighborsClassifier

from sklearn.svm import SVC 

from sklearn.model_selection import RandomizedSearchCV

import imblearn

from imblearn.over_sampling import SMOTE
 
from sklearn.model_selection import train_test_split

from sklearn.preprocessing import StandardScaler

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix,f1_score

#import dataset
data = pd.read_csv(r'/Data set.csv')
data

data.info()

#checking for null values 
data.TotalCharges = pd.to_numeric(data.TotalCharges,errors ='coerce')
data.isnull().any()

data["TotalCharges"].fillna(data["TotalCharges"].median(),inplace=True)
data.isnull().sum()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

data["gender"] = le.fit_transform(data["gender"]) 

data["Partner"] = le.fit_transform(data["Partner"])

data["Dependents"] = le.fit_transform(data["Dependents"])

data["PhoneService"] = le.fit_transform(data["PhoneService"])

data["MultipleLines"] = le.fit_transform(data["MultipleLines"]) 

data["Internet Service"] = le.fit_transform(data["InternetService"])

data["OnlineSecurity"] = le.fit_transform(data["OnlineSecurity"]) 

data["OnlineBackup"] = le.fit_transform(data["OnlineBackup"])

data["DeviceProtection"] = le.fit_transform(data["DeviceProtection"])

data["TechSupport"] = le.fit_transform(data["TechSupport"])

data["StreamingTV"] = le.fit_transform(data["StreamingTV"])

data["StreamingMovies"] = le.fit_transform(data["StreamingMovies"])

data["Contract"] = le.fit_transform(data["Contract"])

data["PaperlessBilling"] = le.fit_transform(data["PaperlessBilling"])

data["PaymentMethod"] = le.fit_transform(data["PaymentMethod"])

data["Churn"] = le.fit_transform(data["Churn"])

data.head()

x= data.iloc[:,0:19].values
y= data.iloc[:,19:20].values

x

y

from imblearn.over_sampling import SMOTE

smt = SMOTE()

x_resample ,y_resample = smt.fit_resample(x,y)

from sklearn.preprocessing import OneHotEncoder

One = OneHotEncoder()

a= one. fit_transform(x_[:,6:7]).toarray()

b one. fit_transform(x[:,7:8]).toarray()

c one.fit transform(x[:,8:9]).toarray()

d_one. fit_transform(x[3:10]).toarray()

es one. fit_transform(x[:,10:11]).toarray()

f one. fit_transform(x,11:12]), toarray() gone.fit transform(x[:12:13]).toarray()

h one. fit_transform(x(:,13:14]).toarray()

one.fit_transform(x[:,14:15]).toarray()

j_one. fit_transform(x[:,16:17]).toarray()

xmp.delete(x,[6,7,8,9,10,11,12,13,14,16], axis=1)

x-np.concatenate((a,b,c,d,e,f,g,h,1,1,x),axis=1

from google.colab import drive
drive.mount('/content/drive')

data.describe()

plt.figure(figsize=(18,4))
for i,j in enumerated(df_cat):
  plt.subplot(1,4,i+1)
  sns.countplot(df[j])

def transformationplot(feature):
  plt.figure(figsize=(12,5))
  plt.subplot(1,2,1)
  sns.distplot(feature)

  transformationplot(np.log(df['gender']))

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.displot(df['Tenure'],colour='r')
plt.subplot(122)
sns.displot(df['Na_to_k'])
plt.show()



plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.distplot(data['tenure'])
plt.subplot(1,2,2)
sns.distplot(data['monthlycharges'])

data.shape()

sns.barplot(x="churn",y="MonthlyCharges",data=data)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_resample,y_resample,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

#importing and building the Decision tree model

def logreg(x_train,x_test,y_train,y_test): 
  
    lr=LogisticRegression(random_state=0)

    lr.fit(x_train,y_train)

    y_lr_tr = Ir.predict(x_train)

   print(accuracy_score(y_lr_tr,y_train))
   
   yPred_1r = lr.predict(x_test)

   print(accuracy_score (yPred_1r,y_test))

   print("**Logistic Regression**")

   print("Confusion Matrix")

   print(confusion matrix(y_test,yPred_1r)) print("classification Report")

  print(classification_report(y_test,yPred_lr))



compareModel(x_train,x_test,y_train,y_test)